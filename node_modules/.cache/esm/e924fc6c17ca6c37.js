let arg,chalk,inquirer,path,createProject,fs,figlet;_17c‍.x([["cli",()=>cli]]);_17c‍.w("arg",[["default",["arg"],function(v){arg=v}]]);_17c‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_17c‍.w("inquirer",[["default",["inquirer"],function(v){inquirer=v}]]);_17c‍.w("path",[["default",["path"],function(v){path=v}]]);_17c‍.w("./main",[["createProject",["createProject"],function(v){createProject=v}]]);_17c‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_17c‍.w("figlet",[["default",["figlet"],function(v){figlet=v}]]);







function getTemplateDirectoryName(template) {
  switch (template) {
    case "Web":
      return "keechma-next-web-template";
    case "Mobile":
      return "keechma-next-mobile-skeleton";
    default:
      break;
  }
}

//inputs from CLI
function parseArgumentsIntoOptions(rawArgs) {
  const args = arg(
    {
      "--git": Boolean,
      "-g": "--git",
    },
    {
      argv: rawArgs.slice(2),
    }
  );
  return {
    git: args["--git"] || false,
    projectName: args._[0],
  };
}

async function promptForOptions(options) {
  const questions = [];

  if (!options.projectName) {
    return Promise.reject(
      _17c‍.g.console.error(
        "%s Failed to initialize project. Project name is undefined!",
        chalk.red.bold("ERROR")
      )
    );
  }

  if (!options.template) {
    questions.push({
      type: "list",
      name: "template",
      message: "Please choose which project template to use",
      choices: ["Web", "Mobile"],
    });
  }

  if (!options.git) {
    questions.push({
      type: "confirm",
      name: "git",
      message: "Initialize a git repository?",
      default: false,
    });
  }

  //wait for user to answer above questions
  const answers = await inquirer.prompt(questions);

  return {
    ...options,
    git: options.git || answers.git,
    template: getTemplateDirectoryName(answers.template) || null,
  };
}

function createProjectDirectory(options) {
  if (!fs.existsSync(options.projectName)) {
    fs.mkdirSync(options.projectName);
  } else {
    throw new Error(
      `%s Directory with name ${options.projectName} already exists!`
    );
  }
  return {
    ...options,
    projectPath: `${process.cwd()}/${options.projectName}`,
  };
}

       async function cli(args) {
  try {
    let options = parseArgumentsIntoOptions(args);
    options = createProjectDirectory(options);
    _17c‍.g.console.log(
      chalk.yellow(
        figlet.textSync("Keechma Next", { horizontalLayout: "full" })
      )
    );
    options = await promptForOptions(options);
    await createProject(options);
  } catch (error) {
    _17c‍.g.console.error(error.message, chalk.red.bold("ERROR"));
  }
}
